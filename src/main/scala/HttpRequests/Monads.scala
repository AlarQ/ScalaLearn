package HttpRequests

import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
import scala.util.Success

object Monads extends App {

  case class SafeValue[+T](private val internalValue: T) {
    def get = synchronized {
      // placeholder for something interesting
      internalValue
    }

    def flatMap[S](transformer: T => SafeValue[S]): SafeValue[S] = synchronized {
      transformer(internalValue)
    }
  }

  // "external" API
  def giveMeSafeValue[T](value: T): SafeValue[T] = SafeValue(value)

  // obtain value using external API
  val safeString: SafeValue[String] = giveMeSafeValue("Scala is awesome!")
  // extract
  val string = safeString.get
  // transform
  val upperString = string.toUpperCase
  // wrap
  val upperSafeString = SafeValue(upperString)

  // ETW - above steps in one:
  val upperSafeString2 = safeString.flatMap(s => SafeValue(s.toUpperCase))


  // Monad is type, which have to fundamental operations:
  // -> ability to wrap a value into another value, here constructor = pure, unit (naming in FP)
  // -> ability to transform one of this type to another type, bind or flatMap (naming in FP)

  // Examples

  // Example #1 - census, Option
  case class Person(firstName: String, lastName: String) {
    assert(firstName != null && lastName != null)
  }

  // census API
  def getPerson(firstName: String, lastName: String): Person =
    if (firstName != null) {
      if (lastName != null) {
        Person(firstName, lastName)
      } else {
        null
      }
    } else {
      null
    }

  def getPersonBetter(firstName: String, lastName: String): Option[Person] =
    Option(firstName).flatMap(fName =>
      Option(lastName).flatMap(lName =>
        Option(Person(fName, lName))
      ))

  def getPersonEvenBetter(firstName: String, lastName: String): Option[Person] = for {
    fName <- Option(firstName)
    lName <- Option(lastName)
  } yield Person(fName, lName)

  // Example #2 - asynchronous, fetches
  // online store
  case class User(id: String)

  case class Product(sku: String, price: BigDecimal)

  // external APIs

  def getUser(url: String): Future[User] = Future {
    User("Adam") // sample impl
  }

  def getLastOrder(userId: String): Future[Product] = {
    Future(Product("123-456", 12.12)) // sample impl
  }

  val adamsUrl = "my.store.com/users/adam"
  // ETW - beginner's way, very bad
  getUser(adamsUrl).onComplete {
    case Success(User(id)) =>
      val lastOrder = getLastOrder(id)
      lastOrder.onComplete {
        case Success(Product(sku, p)) =>
          val vatIncludedPrice = p * 1.23
        // pass it on - send Adam on email
      }
  }

  val vatIncludedPrice: Future[BigDecimal] = getUser(adamsUrl)
    .flatMap(user => getLastOrder(user.id))
    .map(_.price * 1.23)

  val vatIncludedPriceFor = for {
    user <- getUser(adamsUrl)
    product <- getLastOrder(user.id)
  } yield product.price * 1.23

  // Example #3: double for-loops

  val numbers = List(1, 2, 3)
  val chars = List('a', 'b', 'c')

  // flatMaps
  val checkerBoard = numbers.flatMap(number => chars.map(char => (number, char)))

  val checkerBoardFor = for {
    number <- numbers
    char <- chars
  } yield (number, char)

  // Properties of Monads

  // prop 1 - Left Identity

  def twoConsecutive(x: Int) = List(x, x + 1)

  twoConsecutive(3) // List(3,4)
  List(3).flatMap(twoConsecutive) // List(3,4)
  // in general :
  // Monad(x).flatMap(f) == f(x)

  // prop 2 - right identity
  List(1, 2, 3).flatMap(x => List(x)) // List(1,2,3)

  // in general:
  // Monad(x).flatMap(x => Monad(x)) = Monad(x) // USELESS

  // prop 3 - associativity, implementing ETW over and over
  val incrementer = (x: Int) => List(x, x + 1)
  val doubler = (x: Int) => List(x, 2 * x)
  numbers.flatMap(incrementer).flatMap(doubler) // List(1, 2, 2, 4 generated by 1
                                                  // || 2, 4, 3, 6 generated by 2
  //                                                  || 3, 6, 4, 8 generated by 3)
  // List(1, 2, 2, 4, 2, 4, 3, 6, 3, 6, 4, 8) equals:
    /*
    List(
    incrementer(1).flatMap(doubler),
    incrementer(2).flatMap(doubler),
    incrementer(3).flatMap(doubler)
    )
     */
  // the same result:
  numbers.flatMap(x => incrementer(x).flatMap(doubler))
  // in general:
  // sequencesness xD not a world
  // Monad(x).flatMap(f).flatMap(g) == Monad(x).flatMap(x => f(x).flatMap(g))
}